{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA,UAAMA,MAAM,GAAW,CACrB;AACEC,YAAI,EAAE,EADR;AAEEC,iBAAS,EAAEC;AAFb,OADqB,CAAvB;;UAWaC;;;;;yBAAAA;AAAkB;;;cAAlBA;;;kBAHF,CAACC,mEAAsBL,MAAtB,CAAD,GACCK;;;;4HAECD,qBAAkB;AAAAE;AAAAC,oBAFnBF,yDAEmB;AAAA;AAFP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACkBRG;;AAOEA;;AACFA;;;;;;AAwBAA;;AAOEA;;AACFA;;;;;;;;;;;UC3DHC;AAcX,iCACSC,EADT,EAEUC,WAFV,EAGUC,WAHV,EAIUC,MAJV,EAIwB;AAAA;;AAHf;AACC;AACA;AACA;AAdV,wBAAS,KAAT;AAOA,4BAAa,KAAb,CAOwB,CAEtB;AACD;;;;iBAED,oBAAQ;AACN,iBAAKC,UAAL;AACD;;;iBAED,sBAAU;AACR,iBAAKC,IAAL,GAAY,KAAKJ,WAAL,CAAiBK,KAAjB,CAAuB;AACjCC,sBAAQ,EAAE,CAAC,EAAD,EAAKC,+DAAL,CADuB;AAEjCC,sBAAQ,EAAE,CAAC,EAAD,EAAKD,+DAAL,CAFuB,CAEI;;AAFJ,aAAvB,CAAZ;AAID;;;iBAED,sBAAU;AACR,iBAAKH,IAAL,CAAUK,QAAV,CAAmB,UAAnB,EAA+BC,MAA/B,GADQ,CACiC;;AACzC,iBAAKN,IAAL,CAAUK,QAAV,CAAmB,UAAnB,EAA+BC,MAA/B,GAFQ,CAEiC;AAC1C;;;iBAED,uBAAW;AACT,iBAAKN,IAAL,CAAUK,QAAV,CAAmB,UAAnB,EAA+BE,OAA/B,GADS,CACiC;;AAC1C,iBAAKP,IAAL,CAAUK,QAAV,CAAmB,UAAnB,EAA+BE,OAA/B,GAFS,CAEiC;AAC3C;;;iBACD,kBAAM;AACJ,gBAAMC,IAAI,GAAG;AACXN,sBAAQ,EAAE,KAAKA,QADJ;AAEXE,sBAAQ,EAAE,KAAKA;AAFJ,aAAb;AAID,YACD;;;;iBACA,yBAAa;AAAA;;AACX,iBAAKK,UAAL,GAAkB,IAAlB,CADW,CACa;;AACxB,iBAAKC,WAAL,GAFW,CAES;;AACpB,gBAAMF,IAAI,GAAG;AACXN,sBAAQ,EAAE,KAAKF,IAAL,CAAUW,GAAV,CAAc,UAAd,EAA0BC,KADzB;AAEXR,sBAAQ,EAAE,KAAKJ,IAAL,CAAUW,GAAV,CAAc,UAAd,EAA0BC,KAFzB,CAEgC;;AAFhC,aAAb,CAHW,CAQX;;AACA,iBAAKf,WAAL,CAAiBgB,KAAjB,CAAuBL,IAAvB,EAA6BM,SAA7B,CAAuC,UAACC,KAAD,EAAe;AACpD;AACA,kBAAI,CAACA,KAAK,CAACC,OAAX,EAAoB;AAClB,qBAAI,CAACnB,WAAL,CAAiBoB,SAAjB,CACE,QADF,EAEE,mBAFF,EAGEF,KAAK,CAACG,OAHR;;AAKA,qBAAI,CAACT,UAAL,GAAkB,KAAlB,CANkB,CAMO;;AACzB,qBAAI,CAACU,UAAL,GAPkB,CAOC;;AACpB,eARD,MAQO;AACL,oBAAIC,OAAO,GAAG,wDAAsBL,KAAK,CAACA,KAA5B,CAAd;;AACA,qBAAI,CAAClB,WAAL,CAAiBoB,SAAjB,CAA2B,SAA3B,EAAsC,SAAtC,EAAiDF,KAAK,CAACG,OAAvD;;AACA,qBAAI,CAACrB,WAAL,CAAiBwB,aAAjB,CAA+BN,KAAK,CAACA,KAArC,EAA4CK,OAA5C;;AACA,oBAAI,KAAI,CAACvB,WAAL,CAAiByB,iBAAjB,EAAJ,EAA0C;AACxC;AACA,uBAAI,CAACxB,MAAL,CAAYyB,QAAZ,CAAqB,CAAC,OAAD,CAArB;AACD,iBAHD,MAGO;AACL,uBAAI,CAAC1B,WAAL,CAAiB2B,MAAjB;;AACA,uBAAI,CAAC1B,MAAL,CAAYyB,QAAZ,CAAqB,CAAC,OAAD,CAArB,EAFK,CAE4B;;AAClC;AACF;AACF,aAtBD;AAuBD;;;;;;;yBAlFU7B,iBAAcD;AAAA;;;cAAdC;AAAc+B;AAAAC;AAAAC;AAAAC;AAAAC;AAAA;ADb3BpC;;AACEA;;AACEA;;AAQEA;;AACEA;;AAAIA;;AAAiCA;;AACrCA;;AAAyBA;AAAA,qBAAUqC,mBAAV;AAAyB,aAAzB;;AACvBrC;;AACEA;;AAA2CA;;AAAQA;;AACnDA;;AAQEA;;AAQAA;;AACEA;;AASFA;;AACFA;;AACFA;;AAEAA;;AACEA;;AAA2CA;;AAAQA;;AACnDA;;AAQEA;;AAQAA;;AACEA;;AASFA;;AACFA;;AACFA;;AACAA;;AAMEA;;AACFA;;AACFA;;AACFA;;AACFA;;AACFA;;AACFA;;;;AA5EcA;;AAAAA;;AAIAA;;AAAAA;;AAkBKA;;AAAAA;;AAcLA;;AAAAA;;AAkBKA;;AAAAA;;AAWPA;;AAAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UEpDCsC;;;;;yBAAAA;AAAW;;;cAAXA;;;kBAbF,CACPC,yDADO,EAEPC,qEAFO,EAGPC,4DAHO,EAIPC,2DAJO,EAKPA,wDALO,EAMPA,0DANO,EAOPC,uDAPO,EAQPA,+DARO,EASPD,0DATO;;;;4HAaEJ,cAAW;AAAAM,yBAFPC,4DAEO;AAFO/C,oBAV3ByC,yDAU2B,EAT3BC,qEAS2B,EAR3BC,4DAQ2B,EAP3BC,2DAO2B,EAN3BA,wDAM2B,EAL3BA,0DAK2B,EAJ3BC,uDAI2B,EAH3BA,+DAG2B,EAF3BD,0DAE2B;AAEP;AAJN;;;;","names":["routes","path","component","_login_component__WEBPACK_IMPORTED_MODULE_0__","LoginRoutingModule","_angular_router__WEBPACK_IMPORTED_MODULE_2__","imports","exports","_angular_core__WEBPACK_IMPORTED_MODULE_3__","LoginComponent","cs","formBuilder","authService","router","createForm","form","group","username","_angular_forms__WEBPACK_IMPORTED_MODULE_4__","password","controls","enable","disable","user","processing","disableForm","get","value","login","subscribe","token","success","makeToast","message","enableForm","decoded","storeUserData","CurrentlyloggedIn","navigate","logout","selectors","decls","vars","consts","template","ctx","LoginModule","_angular_common__WEBPACK_IMPORTED_MODULE_4__","_login_routing_module__WEBPACK_IMPORTED_MODULE_0__","_theme_theme_module__WEBPACK_IMPORTED_MODULE_2__","_nebular_theme__WEBPACK_IMPORTED_MODULE_5__","_angular_forms__WEBPACK_IMPORTED_MODULE_6__","declarations","_login_component__WEBPACK_IMPORTED_MODULE_1__"],"sources":["webpack:///src/app/login/login-routing.module.ts","webpack:///src/app/login/login.component.html","webpack:///src/app/login/login.component.ts","webpack:///src/app/login/login.module.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { LoginComponent } from './login.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: LoginComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class LoginRoutingModule { }\r\n\r\n\r\n/*\r\nCopyright Google LLC. All Rights Reserved.\r\nUse of this source code is governed by an MIT-style license that\r\ncan be found in the LICENSE file at http://angular.io/license\r\n*/\r\n","<nb-layout>\r\n  <nb-layout-column>\r\n    <div\r\n      class=\"wrapper login-background\"\r\n      style=\"\r\n        background: url('https://source.unsplash.com/1920x2400?nature,river,ocean')\r\n          no-repeat center center fixed;\r\n        background-size: cover;\r\n      \"\r\n    >\r\n      <div class=\"login-form container\">\r\n        <h2>Personal Decentralized File Drive</h2>\r\n        <form [formGroup]=\"form\" (submit)=\"onLoginSubmit()\">\r\n          <div class=\"form-group\">\r\n            <label style=\"color: white\" for=\"username\">Username</label>\r\n            <div\r\n              [ngClass]=\"{\r\n                'has-error':\r\n                  form.controls.username.errors && form.controls.username.dirty,\r\n                'has-success':\r\n                  form.controls.username.valid && form.controls.username.dirty\r\n              }\"\r\n            >\r\n              <input\r\n                class=\"form-control\"\r\n                type=\"text\"\r\n                name=\"username\"\r\n                formControlName=\"username\"\r\n                autocomplete=\"off\"\r\n                webauthn\r\n              />\r\n              <ul class=\"help-block\">\r\n                <span\r\n                  style=\"color: red\"\r\n                  *ngIf=\"\r\n                    form.controls.username.errors?.required &&\r\n                    form.controls.username.dirty\r\n                  \"\r\n                >\r\n                  This field is required.\r\n                </span>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"form-group\">\r\n            <label style=\"color: white\" for=\"password\">Password</label>\r\n            <div\r\n              [ngClass]=\"{\r\n                'has-error':\r\n                  form.controls.password.errors && form.controls.password.dirty,\r\n                'has-success':\r\n                  form.controls.password.valid && form.controls.password.dirty\r\n              }\"\r\n            >\r\n              <input\r\n                class=\"form-control\"\r\n                type=\"password\"\r\n                name=\"password\"\r\n                formControlName=\"password\"\r\n                autocomplete=\"new-password\"\r\n                webauthn\r\n              />\r\n              <ul class=\"help-block\">\r\n                <span\r\n                  style=\"color: red\"\r\n                  *ngIf=\"\r\n                    form.controls.password.errors?.required &&\r\n                    form.controls.password.dirty\r\n                  \"\r\n                >\r\n                  This field is required.\r\n                </span>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n          <button\r\n            [disabled]=\"!form.valid || processing\"\r\n            class=\"btn btn-primary\"\r\n            type=\"submit\"\r\n            value=\"Login\"\r\n          >\r\n            Login\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  </nb-layout-column>\r\n</nb-layout>\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { FormGroup, FormBuilder, Validators } from \"@angular/forms\";\r\nimport { Router } from \"@angular/router\";\r\nimport { AuthService } from \"../@core/services/auth.service\";\r\nimport { ConnectionService } from \"../@core/services/connection.service\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport { UserToken } from \"../@core/data/user-token\";\r\n\r\n@Component({\r\n  selector: \"app-login\",\r\n  templateUrl: \"./login.component.html\",\r\n  styleUrls: [\"./login.component.scss\"],\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  username: String;\r\n  password: String;\r\n  msg: String;\r\n  loader = false;\r\n  disableSubmit;\r\n  conn;\r\n  userID;\r\n\r\n  messageClass;\r\n  message;\r\n  processing = false;\r\n  form: FormGroup;\r\n\r\n  constructor(\r\n    public cs: ConnectionService,\r\n    private formBuilder: FormBuilder,\r\n    private authService: AuthService,\r\n    private router: Router\r\n  ) {\r\n    // this.createForm();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.createForm();\r\n  }\r\n\r\n  createForm() {\r\n    this.form = this.formBuilder.group({\r\n      username: [\"\", Validators.required], // Username field\r\n      password: [\"\", Validators.required], // Password field\r\n    });\r\n  }\r\n\r\n  enableForm() {\r\n    this.form.controls[\"username\"].enable(); // Enable username field\r\n    this.form.controls[\"password\"].enable(); // Enable password field\r\n  }\r\n\r\n  disableForm() {\r\n    this.form.controls[\"username\"].disable(); // Disable username field\r\n    this.form.controls[\"password\"].disable(); // Disable password field\r\n  }\r\n  Submit() {\r\n    const user = {\r\n      username: this.username,\r\n      password: this.password,\r\n    };\r\n  }\r\n  // Functiont to submit form and login user\r\n  onLoginSubmit() {\r\n    this.processing = true; // Used to submit button while is being processed\r\n    this.disableForm(); // Disable form while being process\r\n    const user = {\r\n      username: this.form.get(\"username\").value, // Username input field\r\n      password: this.form.get(\"password\").value, // Password input field\r\n    };\r\n\r\n    // Function to send login data to API\r\n    this.authService.login(user).subscribe((token: any) => {\r\n      //Check if response was a success or error\r\n      if (!token.success) {\r\n        this.authService.makeToast(\r\n          \"danger\",\r\n          \"Failed Logging in\",\r\n          token.message\r\n        );\r\n        this.processing = false; // Enable submit button\r\n        this.enableForm(); // Enable form for editting\r\n      } else {\r\n        let decoded = jwt_decode<UserToken>(token.token);\r\n        this.authService.makeToast(\"success\", \"Success\", token.message);\r\n        this.authService.storeUserData(token.token, decoded);\r\n        if (this.authService.CurrentlyloggedIn()) {\r\n          // this.authService.loggingIn(decoded.role);\r\n          this.router.navigate([\"admin\"]);\r\n        } else {\r\n          this.authService.logout();\r\n          this.router.navigate([\"login\"]); // Navigate to dashboard view\r\n        }\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { LoginRoutingModule } from './login-routing.module';\r\nimport { LoginComponent } from './login.component';\r\n\r\nimport { ThemeModule } from '../@theme/theme.module';\r\nimport { NbSpinnerModule } from '@nebular/theme';\r\nimport { NbCardModule, NbButtonModule } from '@nebular/theme';\r\nimport { NbLayoutModule } from '@nebular/theme';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    LoginRoutingModule,\r\n    ThemeModule,\r\n    NbSpinnerModule,\r\n    NbCardModule,\r\n    NbLayoutModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    NbButtonModule,\r\n  ],\r\n  declarations: [LoginComponent]\r\n})\r\nexport class LoginModule { }\r\n\r\n\r\n/*\r\nCopyright Google LLC. All Rights Reserved.\r\nUse of this source code is governed by an MIT-style license that\r\ncan be found in the LICENSE file at http://angular.io/license\r\n*/\r\n"]}